use crate::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|(\*+([^*/])))*\*+/" => {},
  // 剩下的情况采用默认方式处理
  _
}
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;
BType: BType = "int" => BType::Int;

Block: Block = "{" <items: BlockItem*> "}" => Block { <> };

BlockItem: BlockItem = {
  <stmt: Stmt> => BlockItem::Stmt(stmt),
  <decl: Decl> => BlockItem::Decl(decl),
}

Decl: Decl = {
  <const_decl: ConstDecl> => <>,
}

ConstDecl: Decl = {
  "const" <b: BType> <mut const_defs: (<ConstDef> ",")*> <const_def_one: ConstDef> ";" => Decl::ConstDecl {
    b_type: b,
    const_def: {
      const_defs.push(const_def_one);
      const_defs
    }
  }
}

ConstDef: ConstDef = {
  <ident: Ident> "=" <exp: Exp> => ConstDef {
    ident: ident,
    const_exp: ConstExp(exp),
  }
}

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

LVal: String = <ident: Ident> => ident;

// Todo
// https://en.cppreference.com/w/c/language/operator_precedence
Exp: Exp = {
  #[precedence(level="1")]
  PrimaryExp => <>,
  #[precedence(level="2")] #[assoc(side="right")]
  "+" <e: Exp> => Exp::PlusUnary(Box::new(e)),
  "-" <e: Exp> => Exp::MinusUnary(Box::new(e)),
  "!" <e: Exp> => Exp::NotUnary(Box::new(e)),
  #[precedence(level="3")] #[assoc(side="left")]
  <lhs: Exp> "*" <rhs: Exp> => Exp::MulBinary(Box::new(lhs), Box::new(rhs)),
  <lhs: Exp> "/" <rhs: Exp> => Exp::DivBinary(Box::new(lhs), Box::new(rhs)),
  <lhs: Exp> "%" <rhs: Exp> => Exp::ModBinary(Box::new(lhs), Box::new(rhs)),
  #[precedence(level="4")] #[assoc(side="left")]
  <lhs: Exp> "+" <rhs: Exp> => Exp::AddBinary(Box::new(lhs), Box::new(rhs)),
  <lhs: Exp> "-" <rhs: Exp> => Exp::SubBinary(Box::new(lhs), Box::new(rhs)),
  #[precedence(level="6")] #[assoc(side="left")]
  <lhs: Exp> "<" <rhs: Exp> => Exp::LTBinary(Box::new(lhs), Box::new(rhs)),
  <lhs: Exp> "<=" <rhs: Exp> => Exp::LEBinary(Box::new(lhs), Box::new(rhs)),
  <lhs: Exp> ">" <rhs: Exp> => Exp::GTBinary(Box::new(lhs), Box::new(rhs)),
  <lhs: Exp> ">=" <rhs: Exp> => Exp::GEBinary(Box::new(lhs), Box::new(rhs)),
  #[precedence(level="7")] #[assoc(side="left")]
  <lhs: Exp> "==" <rhs: Exp> => Exp::EqBinary(Box::new(lhs), Box::new(rhs)),
  <lhs: Exp> "!=" <rhs: Exp> => Exp::NeBinary(Box::new(lhs), Box::new(rhs)),
  #[precedence(level="11")] #[assoc(side="left")]
  <lhs: Exp> "&&" <rhs: Exp> => Exp::LAndBinary(Box::new(lhs), Box::new(rhs)),
  #[precedence(level="12")] #[assoc(side="left")]
  <lhs: Exp> "||" <rhs: Exp> => Exp::LOrBinary(Box::new(lhs), Box::new(rhs)),
}

// BinaryExp:

PrimaryExp: Exp = {
  "(" <exp: Exp> ")" => Exp::Paren(Box::new(exp)),
  LVal => Exp::LVal(<>),
  Number => Exp::Number(<>),
}


//  <unary_exp: UnaryExp> => Exp { <> };

// PrimaryExp: PrimaryExp = {
//     "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
//     Number => PrimaryExp::Number(<>),
// }

// UnaryExp: UnaryExp = {
//     PrimaryExp => UnaryExp::Primary(<>),
//     "+" <e: UnaryExp> => UnaryExp::PlusUnary(Box::new(e)),
//     "-" <e: UnaryExp> => UnaryExp::MinusUnary(Box::new(e)),
//     "!" <e: UnaryExp> => UnaryExp::NotUnary(Box::new(e)),
// }

Number: i32 = <num: IntConst> => <>;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
